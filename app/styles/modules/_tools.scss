/*
  0. flex-grid system
  1. FLEX JUSTIFY & ALIGN-ITEMS
  2. RESET-LIST
  3. POSITION
  4. CLEARFIX
  5. HIDDEN & INVISIBLE
  */

/*------------------------------------*\
    #flex-grid system
*------------------------------------*/

// base grid container width
$grid-width: 100% !default;

// base col
$col-1: $grid-width / 1 !default;
$col-2: $grid-width / 2 !default;
$col-3: $grid-width / 3 !default;
$col-4: $grid-width / 4 !default;
$col-5: $grid-width / 5 !default;
$col-6: $grid-width / 6 !default;
$col-7: $grid-width / 7 !default;
$col-8: $grid-width / 8 !default;
$col-9: $grid-width / 9 !default;
$col-10: $grid-width / 10 !default;
$col-11: $grid-width / 11 !default;
$col-12: $grid-width / 12 !default;

// base gutter
$gutter: 2.5em !default;

// base grid-system
$grid-system: 'flex'; //flex, float or use both as fallback inside the file

/*------------------------------------*\
    #1. GRID
    \*------------------------------------*/

	// flex grid AND float fallback.
	@mixin grid-row-float {
		&:after {
			content: "";
			display: table;
			clear: both;
		}
	}

	@mixin grid-row-flex () {
		display: flex;
	    flex-wrap: wrap; // IE10 only seems to work with this value
	}

	@mixin grid-col-float ($base-width:100%) {
		float: left;
		width: $base-width;
	}

	@mixin grid-col-flex ($base-width:auto) {
	    // flex: 0 0 $base-width;
	    // IE 10 has problems with flex and box-sizing: border-box - https://github.com/philipwalton/flexbugs/issues/3
	    max-width: $base-width;
	    flex: 0 0 $base-width;
	}

	@mixin row($col-width: $grid-width) {
	    // for nested grid
	    margin: ($gutter / -2);

	    @if ($grid-system == 'flex' or $grid-system == 'all') {
	    	@include grid-row-flex;
	    }

	    @if ($grid-system == 'float' or $grid-system == 'all') {
	    	@include grid-row-float;
	    }

	    > * {
	    	@include col($col-width);
	    }
	}

	@mixin col($width: $grid-width) {
		padding: ($gutter / 2);

		@if ($grid-system == 'flex' or $grid-system == 'all') {
			@include grid-col-flex($width);
		}

		@if ($grid-system == 'float' or $grid-system == 'all') {
			@include grid-col-float($width);
		}
	}

	@function col-size($grid-width, $col) {
		@return col-calculation($grid-width, $col);
	}

/*------------------------------------*\
    # 1. FLEX JUSTIFY & ALIGN-ITEMS
    \*------------------------------------*/
    $-content: (
    	'left': flex-start,
    	'right': flex-end,
    	'center': center,
    	'justify': space-between,
    	'space': space-around,
    	);

    $-items: (
    	'top': flex-start,
    	'bottom': flex-end,
    	'center': center,
    	'stretch': stretch,
    	);


// Flex $x = (horizontal alignment) + $y  = (vertical alignment)
@mixin flex-align($x: null, $y: null){
	display: flex;
	@if $x {
		@if map-has-key($-content, $x) {
			$x: map-get($-content, $x);
		}
		@else {
			@warn '[$x], $y: For justify-content: left, right, center, justify, or spaced'
		}
	}

	@if $y {
		@if map-has-key($-items, $y) {
			$y: map-get($-items, $y);
		}
		@else {
			@warn '$x, [$y]: For align-items: use top, bottom, center or stretch'
		}
	}

	justify-content: $x;
	align-items: $y;
}

/*------------------------------------*\
    #2. RESET-LIST
    \*------------------------------------*/
// Resets default list styling.
//
// @usage - `@include reset-list`
//
// Styleguide 10.1

@mixin reset-list {
	list-style: none;
	margin: 0;
	padding: 0;
}

/*------------------------------------*\
    #3. Position
    \*------------------------------------*/

/// Shorthandizes position declarations.
/// @param {String} $type - Either `relative`, `absolute` or `fixed`
/// example:  @include position(absolute, $top: 10px, $left: 10px);
@mixin position($type, $top: null, $right: null, $bottom: null, $left: null) {
	position: $type;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

/// Vertically centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin vertical-center {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}

/// Horizontally centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin horizontal-center {
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
}

/*------------------------------------*\
    #4.Clearfix
    \*------------------------------------*/

// Nicolas Gallagher's micro clearfix hack
//
// @source - http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix {
	*zoom: 1;

	&:before,
	&:after {
		content: '';
		display: table;
	}

	&:after { clear: both; }
}


/*------------------------------------*\
    #5.Hidden & Invisible
    \*------------------------------------*/
// Hide Text
//
// @usage - `@include hide-text`

@mixin hide-text {
	overflow: hidden;
	text-indent: 101%;
	white-space: nowrap;
}

// Hidden
//
// Hide from both screenreaders and browsers
//
// @usage - `@include hidden`

@mixin hidden {
	display: none !important;
	visibility: hidden;
}

// Visually Hidden
//
// Hide only visually, but have it available for screenreaders
//
// @usage - `@include visuallyhidden`

@mixin visuallyhidden {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;

  // Extends the .visuallyhidden class to allow the element to be focusable
  // when navigated to via the keyboard: h5bp.com/p

  &.focusable {
  	&:active,
  	&:focus {
  		clip: auto;
  		height: auto;
  		margin: 0;
  		overflow: visible;
  		position: static;
  		width: auto;
  	}
  }
}

// Invisible
//
// Hide visually and from screenreaders, but maintain layout
//
// @usage - `@include invisible`

@mixin invisible { visibility: hidden; }




